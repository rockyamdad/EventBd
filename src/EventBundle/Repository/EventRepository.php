<?php

namespace EventBundle\Repository;

use Doctrine\ORM\EntityRepository;
use EventBundle\Entity\EventGroup;

/**
 * EventRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class EventRepository extends EntityRepository
{
    public function create($data)
    {
        $this->_em->persist($data);
        $this->_em->flush();
    }
    public function update($data)
    {
        $this->_em->persist($data);
        $this->_em->flush();
    }
    public function delete($data)
    {
        $this->_em->remove($data);
        $this->_em->flush();
    }
    public function getNewEvents()
    {
        $qb = $this->createQueryBuilder('e');
        $query =$qb->select('e')
            ->where('e.status =:status')
            ->andWhere('e.isCompleted =:isCompleted')
            ->setParameter('status','Activate')
            ->setParameter('isCompleted',1)
            ->orderBy('e.createdDateTime','DESC')
            ->setMaxResults(8);
        return $query->getQuery()->getResult();
    }

    public function getPopularEvents()
    {
        $qb = $this->createQueryBuilder('e');
        $query =$qb->select('e')
            ->leftJoin('EventBundle:EventView', 'ev', 'WITH', 'ev.event = e.id')
            ->leftJoin('EventBundle:ScheduleMaster', 'es', 'WITH', 'es.event = e.id')
            ->orderBy('ev.views','DESC')
            ->where('e.status =:status')
            ->andWhere('e.isCompleted =:isCompleted')
            ->andWhere($qb->expr()->gte('es.startDate',':now'))
            ->setParameter('status','Activate')
            ->setParameter('isCompleted',1)
            ->setParameter('now',new \DateTime('now'))
            ->setMaxResults(6);
        return $query->getQuery()->getResult();
    }
    public function getUpComingEvents()
    {
        $qb = $this->createQueryBuilder('e');
        $query =$qb->select('e')
            ->leftJoin('EventBundle:ScheduleMaster', 'es', 'WITH', 'es.event = e.id')
            ->where('e.status =:status')
            ->andWhere('e.isCompleted =:isCompleted')
            ->andWhere($qb->expr()->gte('es.startDate',':now'))
            ->setParameter('status','Activate')
            ->setParameter('isCompleted',1)
            ->setParameter('now',new \DateTime('now'))
            ->setMaxResults(6);
        return $query->getQuery()->getResult();
    }
    public function getFamousEvents()
    {
        $query = $this->createQueryBuilder('e')
            ->where('e.status =:status')
            ->andWhere('e.isCompleted =:isCompleted')
            ->setParameter('status','Activate')
            ->setParameter('isCompleted',1)
            ->orderBy('e.id','DESC')
            ->setMaxResults(6);
        return $query->getQuery()->getResult();
    }

    public function getEventSearchResult($data)
    {
        if(empty($data['start_date']) &&
           empty($data['end_date']) &&
           empty($data['name']) &&
           empty($data['group']) &&
           empty($data['location'])
          ){
            return false;
        }

        $start_date = date('Y-m-d',strtotime($data['start_date']));
        $end_date = date('Y-m-d',strtotime($data['end_date']));

            $query = $this->createQueryBuilder('e');
            $query->join('e.scheduleMaster','sm');
            $query->join('e.location','l');
            $query->join('e.group','g');
        if(!empty($data['name'])){
            $query->where($query->expr()->like("e.name", "'%$data[name]%'"  ));
        }
        if(!empty($data['location'])) {
            $query->andWhere($query->expr()->like("l.address", "'%$data[location]%'"  ));
        }
        if(!empty($data['group'])) {
            $query->andWhere('g.id = :group');
            $query->setParameter('group',$data['group']);
        }
        if(!empty($data['start_date']) && !empty($data['end_date'])) {
            $query->andWhere('sm.startDate >= :start_date');
            $query->andWhere('sm.startDate <= :end_date');
            $query->setParameter('start_date', $start_date);
            $query->setParameter('end_date', $end_date);
        }
        return  $query->getQuery()->getResult();
    }
    public function getLatLang($results){

        $latLang = array();
        if($results) {
            foreach ($results as $res) {
                $latLang[] = array(
                    'latitude'  => floatval($res->getLocation()->getLatitude()),
                    'longitude' => floatval($res->getLocation()->getLongitude())
                );
            }
        }
            return $latLang;
    }

}
